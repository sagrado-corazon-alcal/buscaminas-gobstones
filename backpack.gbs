// Representacion
function hayPista(){
	return(hayBolitas(Verde))
}

function hayBandera(){
	return (nroBolitas(Rojo) == 1)
}

function hayMina(){
	return (nroBolitas(Negro) ==1)
}

function cantidadMinas(){
	return (nroBolitas(Negro))
}

function estaTapada(){
	return (nroBolitas(Azul) == 1)
}

function hayMarca(){
	return(nroBolitas(colorMarca()) >= 3)
}

function colorMarca() {
	return (Rojo)
}

function esPrimeraMarca(){
	return (nroBolitas(colorMarca()) == 4)
}

function hayLineaAl(dir){
	Mover(dir)
	return(hayLinea())
}

function hayLinea() {
	return (nroBolitas(Rojo) ==2)
}

// Buscaminas
function totalMinas(){
	cantMinas := 0
	IrAlComienzo()
	while (haySiguiente()){
		if (hayMina()) {
			cantMinas := cantMinas + 1
		}
		IrAlSiguiente()
 	}
	if (hayMina()) {
		cantMinas := cantMinas + 1
	}
	return (cantMinas)
}


function totalMinasConBandera(){
	cantMinas := 0
	IrAlComienzo()
	while (haySiguiente()){
		if (hayMina() && hayBandera()) {
			cantMinas := cantMinas + 1
		}
		IrAlSiguiente()
 	}
	if (hayMina() && hayBandera()) {
		cantMinas := cantMinas + 1
	}
	return (cantMinas)
}

function totalBanderas(){
	cantBanderas := 0
	IrAlComienzo()
	while (haySiguiente()){
		if (hayBandera() || esPrimeraMarca()) {
			cantBanderas := cantBanderas + 1
		}
		IrAlSiguiente()
 	}
	if (hayBandera() || esPrimeraMarca()) {
		cantBanderas := cantBanderas + 1
	}
	return (cantBanderas)
}

function cantMinasDiagonal(dir1, dir2){
	if(puedeMover(dir1) && puedeMover(dir2)){
		Mover(dir1)
		Mover(dir2)
	}
	return (cantidadMinas())
}

function cantMinasAl(dir){
	if(puedeMover(dir)){
		Mover(dir)
	}
return(cantidadMinas())
}

function cantMinasCercanas(){
	return (cantMinasAl(Oeste) + cantMinasDiagonal(Oeste, Norte) + cantMinasAl(Norte) +  cantMinasDiagonal(Norte, Este) + cantMinasAl(Este) +  cantMinasDiagonal(Este, Sur) + cantMinasAl(Sur) +  cantMinasDiagonal(Oeste, Sur))
}

function debeSerMarcada() {
	return (not hayMina() && not hayPista() && estaTapada() && not hayMarca() && hayMarcaAlLado())
}

procedure MarcarSiCorresponde() {
	if(debeSerMarcada()){ 
		Marcar()	
	}
}

function hayMarcaAlLado(){
	return(hayMarcaAl(Norte) || hayMarcaAl(Este) || hayMarcaAl(Sur) || hayMarcaAl(Oeste))
}

function hayMarcaAl(dir){
	if(puedeMover(dir)){
		Mover(dir)
	}
return(hayMarca())
}

procedure InicializarTablero(){
		IrAlOrigen()
		while(haySiguiente()){
			TaparCelda()
			IrAlSiguiente()
		}
		TaparCelda()
}

procedure Marcar(){
	PonerN(3, colorMarca())
}

procedure MarcarPrimera() {
	PonerN(4, colorMarca())
}

procedure SacarBandera(){
	Sacar(Rojo)
}

procedure PonerBandera(){
	if (totalBanderas() < totalMinas()) {
		Poner(Rojo)
	}
}

procedure TaparCelda(){
	if (not hayBolitas(Azul)){
		Poner(Azul)
	}
}

procedure MarcarTodas() {
	MarcarPrimera()

	MarcarHaciaArriba()
	MarcarHaciaAbajo()
}

procedure MarcarHaciaArriba() {
	while(haySiguiente()){
		IrAlSiguiente()
		MarcarSiCorresponde()
	}
}

procedure MarcarHaciaAbajo() {
	while (hayAnterior()){
		IrAlAnterior()
		MarcarSiCorresponde()
	}
}

procedure SacarMarca(){
 if(hayMarca()){
	SacarN(3, colorMarca())
	}
}

procedure IrAPrimeraMarca(){
	IrAlFinal()
	while(not esPrimeraMarca()){
		IrAlAnterior()
	}
}


procedure IrAMarca(){
	while(not hayMarca()){
		IrAlSiguiente()
	}
}

procedure ActualizarContadorBanderas() {
		IrAlContadorBanderas()
		SacarTodas(Verde)
		PonerN(totalMinas() - totalBanderas(), Verde)
}

procedure ActualizarContadorMinas() {
		IrAlContadorMinas()
		SacarTodas(Verde)
		PonerN(totalMinas(), Verde)
}

procedure IrAlContadorBanderas(){
	 IrAlOrigen()
}
 
procedure IrAlContadorMinas(){
		IrAlBorde(Sur)
		MoverN(3, Este)
}

// Recorrido
function haySiguiente(){
	return (puedeMover(Este)||puedeMover(Norte))
	}

function hayAnterior(){
	return (puedeMover(Oeste) || puedeMover(Sur))
}

procedure IrAlOrigen()	{
IrAlBorde(Oeste)
IrAlBorde(Sur)
}

procedure IrAlFinal()	{
IrAlBorde(Este)
IrAlBorde(Norte)
}



procedure IrAlSiguiente(){
	if(puedeMover(Este)){
		Mover(Este)
	} else {
		Mover(Norte)
		IrAlBorde(Oeste)
	}
}

procedure IrAlAnterior(){
	if(puedeMover(Oeste)){
		Mover(Oeste)
	} else {
			Mover(Sur)
			IrAlBorde(Este)
	}
}

// Auxiliares
function estaVacia() {
	return (nroBolitas(Rojo) + nroBolitas(Verde) + nroBolitas(Azul) + nroBolitas(Negro) == 0)
}

procedure MoverHacia(dir){
	if(puedeMover(dir) && not hayLineaAl(dir)){
		Mover(dir)
	}
}

procedure SacarN(cant, color){
	repeat(cant){
		Sacar(color)
	}
}

procedure MoverN(cant, dir){
	repeat(cant){
		Mover(dir)
	}
}
	
procedure PonerN(cant, color){
	repeat(cant){
		Poner(color)
	}
}

procedure SacarTodas(color){
	SacarN(nroBolitas(color), color)
}

procedure Boom() {
	THROW_ERROR("Perdiste...")
}



// Recorrer todo el tablero y sacar las tapas
procedure DestaparTodas() {
		IrAlComienzo()
		while(haySiguiente()){
			DestaparSiCorresponde()
			SacarBanderaSiNoHayMina()
			IrAlSiguiente()
		}
		DestaparSiCorresponde()
		SacarBanderaSiNoHayMina()
		IrAlOrigen()
}

procedure Destapar() {
	Sacar(Azul)
}

procedure DestaparSiCorresponde(){
	if(estaTapada()){
		Destapar()
	}
}

procedure SacarBanderaSiNoHayMina(){
		if(hayBandera() && not hayMina()){
			SacarBandera()
	}
}

procedure IrAlComienzo() {
	IrAlOrigen()
	MoverN(2, Norte)
}